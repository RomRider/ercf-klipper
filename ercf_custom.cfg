[gcode_macro _ERCF_LOAD_TOOL_WITH_HOME]
gcode:
    {% set tune = params.TUNE|default(0)|int %}
    MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=-1
    G4 P200
    QUERY_ENDSTOPS
    _ERCF_LOAD_TOOL_CHECK_ENDSTOP TOOL={params.TOOL|int} TUNE={tune}

[gcode_macro _ERCF_LOAD_TOOL_CHECK_ENDSTOP]
gcode:
    {% set tune = params.TUNE|default(0)|int %}
    {% if printer.query_endstops.last_query["manual_stepper selector_stepper"] != 1 %}
        M118 Cart not in the right place, please fix!
        SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=-1
        _ERCF_PAUSE
    {% else %}
        _ERCF_LOAD_TOOL_AFTER_HOME TOOL={params.TOOL|int} TUNE={tune}
    {% endif %}

[gcode_macro _ERCF_LOAD_TOOL_AFTER_HOME]
gcode:
    {% set tune = params.TUNE|default(0)|int %}
    M118 Loading tool {params.TOOL|int} ...
    _ERCF_SELECT_TOOL TOOL={params.TOOL|int}
    {% set ercf_params = printer.save_variables.variables %}
    ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (params.TOOL|string)]}
    M118 Loading filament from ERCF to extruder ...
    {% set ercf_params = printer.save_variables.variables %}
    ERCF_LOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float}
    _ERCF_LOAD_FILAMENT_IN_EXTRUDER TUNE={tune}

[gcode_macro _ERCF_MOONRAKER_ISSUE_DEVICE]
gcode:
    {% set dev = printer["gcode_macro _ERCF_VAR"].moonraker_ercf_issue %}
    {% if dev is defined %}
        {action_call_remote_method("set_device_power", device=dev, state="on")}
    {% endif %}

[gcode_macro _ERCF_MOONRAKER_CLOG_DEVICE]
gcode:
    {% set dev = printer["gcode_macro _ERCF_VAR"].moonraker_ercf_clog %}
    {% if dev is defined %}
        {action_call_remote_method("set_device_power", device=dev, state="on")}
    {% endif %}


[gcode_macro ERCF_LOAD]
rename_existing: _ERCF_LOAD_ORIG
gcode:
    _ERCF_LOAD_ORIG {rawparams} MOVES={printer["gcode_macro _ERCF_VAR"].num_moves}


[gcode_macro ERCF_UNLOAD]
rename_existing: _ERCF_UNLOAD_ORIG
gcode:
    _ERCF_UNLOAD_ORIG {rawparams} MOVES={printer["gcode_macro _ERCF_VAR"].num_moves}

[gcode_macro _ERCF_STATS]
variable_swapcounter: 0
variable_num_pause: 0
variable_num_clog: 0
gcode:

[gcode_macro _ERCF_DISPLAY_STATS]
gcode:
    M118 ***** ERCF Statistics ******
    M118 Swap count: {printer["gcode_macro _ERCF_STATS"].swapcounter}
    M118 Number of pause: {printer["gcode_macro _ERCF_STATS"].num_pause}
    M118 Number of clogs: {printer["gcode_macro _ERCF_STATS"].num_clog}
    M118 ****************************

[gcode_macro _ERCF_RESET_STATS]
gcode:
    SET_GCODE_VARIABLE MACRO=_ERCF_STATS VARIABLE=swapcounter VALUE=0
    SET_GCODE_VARIABLE MACRO=_ERCF_STATS VARIABLE=num_pause VALUE=0
    SET_GCODE_VARIABLE MACRO=_ERCF_STATS VARIABLE=num_clog VALUE=0

[gcode_macro ERCF_RESUME]
gcode:
    RESUME

[gcode_macro ERCF_INIT_SAVED_VARIABLES]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv.ercf_calib_ref is defined and (params.FORCE | int) != 1 %}
        {action_respond_info("ERCF variables already exist. Use FORCE=1 to overwrite with default values")}
    {% else %}
        {% for chan in range(12) %}
            SAVE_VARIABLE VARIABLE=ercf_calib_{chan} VALUE=1.0
        {% endfor %}
        SAVE_VARIABLE VARIABLE=ercf_calib_ref VALUE=500.0
    {% endif %}

[menu __main __ercf]
type: list
name: ERCF
index: 2

[menu __main __ercf __unlock]
type: command
name: Unlock
enable: { printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 1 }
gcode:
    ERCF_UNLOCK

[menu __main __ercf __home]
type: command
name: Home
gcode:
    ERCF_HOME

[menu __main __ercf __load_tool]
type: input
name: Load Tool: { menu.input | int if menu.input >= 0 else "N/A" }
input: { printer["gcode_macro _ERCF_SELECT_TOOL"].color_selected | int }
input_step: 1
input_min: -1
input_max: { printer["gcode_macro _ERCF_VAR"].colorselector|length - 1}
gcode:
    {% if menu.input >= 0 %}
        T{menu.input|int}
    {% endif %}

[menu __main __ercf __eject]
type: command
name: Eject
gcode:
    ERCF_EJECT

[menu __main __ercf __resume]
type: command
enable: { printer.pause_resume.is_paused }
name: Resume
gcode:
    RESUME

[menu __main __ercf __debug]
type: list
name: Debug

[menu __main __ercf __debug __servo_up]
type: command
name: Servo Up
gcode:
    _ERCF_SERVO_UP

[menu __main __ercf __debug __servo_down]
type: command
name: Servo Down
gcode:
    _ERCF_SERVO_DOWN

[menu __main __ercf __debug __calibrate_single]
type: input
name: Calib. T: { menu.input | int if menu.input >= 0 else "N/A" }
input: { printer["gcode_macro _ERCF_SELECT_TOOL"].color_selected | int }
input_step: 1
input_min: -1
input_max: { printer["gcode_macro _ERCF_VAR"].colorselector|length - 1 }
gcode:
    {% if menu.input >= 0 %}
        _ERCF_CALIBRATE_SINGLE TOOL={menu.input|int}
    {% endif %}


[menu __main __ercf __clog]
type: input
name: Clog ID: {"True" if menu.input == 1 else "False"}
input: { printer["gcode_macro _ERCF_VAR"].clog_detection|int }
input_step: 1
input_min: 0
input_max: 1
gcode:
    SET_GCODE_VARIABLE MACRO=_ERCF_VAR VARIABLE=clog_detection VALUE={menu.input | int}
    {% if not printer.pause_resume.is_paused %}
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE={menu.input|int}
    {% endif %}

[menu __main __ercf __endless_spool]
type: input
name: Endless: { "True" if menu.input == 1 else "False" }
input: { printer["gcode_macro _ERCF_VAR"].endless_spool_mode|int }
input_step: 1
input_min: 0
input_max: 1
gcode:
    SET_GCODE_VARIABLE MACRO=_ERCF_VAR VARIABLE=endless_spool_mode VALUE={menu.input | int}